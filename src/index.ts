import { app, BrowserWindow, screen, Tray, Menu, nativeImage } from 'electron';
import * as path from "node:path";
import Display = Electron.Display;
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let tray = null;

const windows: BrowserWindow[] = []

async function createWindowForDisplay(display: Display): Promise<BrowserWindow> {
  const { x: displayX, y: displayY, width: displayWidth, height: displayHeight } = display.bounds;
  const windowWidth = 800;
  const windowHeight = 600;

  const newWindow = new BrowserWindow({
    height: windowHeight,
    width: windowWidth,
    transparent: true,
    frame: false,
    alwaysOnTop: true,
    skipTaskbar: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
    },
  });

  newWindow.setBounds({
    x: displayX + (displayWidth - windowWidth),
    y: displayY,
    width: windowWidth,
    height: windowHeight,
  });

  await newWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  newWindow.setIgnoreMouseEvents(true, { forward: true });

  return newWindow;
}

const createWindow = async (): Promise<void> => {
  const displays = screen.getAllDisplays();
  for (const display of displays) {
    const newWindow = await createWindowForDisplay(display)
    windows.push(newWindow)
  }
  const iconPath = app.isPackaged
      ? path.join(__dirname, "..", "..", "..", "noobgam.ico")
      : path.join(__dirname, "..", "..", "src", "noobgam.ico");

  const icon = nativeImage.createFromPath(iconPath);
  tray = new Tray(icon);
  tray.setToolTip(`Noob's swamp.`)
  const contextMenu = Menu.buildFromTemplate([
      {
          label: 'Windows', submenu: windows.map((el, idx) => {
              return {
                  checked: true, type: 'checkbox', label: `Display ${idx + 1}`, click: (menuItem) => {
                      // Toggle window visibility based on the new checked state
                      if (menuItem.checked) {
                          el.show();
                      } else {
                          el.hide();
                      }
                  }
              }
          })
      },
    { label: 'Quit', type: 'normal', click: () => {
        app.quit()
      }},
  ])
  tray.setContextMenu(contextMenu)
};


app.on('ready', createWindow);

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', async () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    await createWindow();
  }
});
