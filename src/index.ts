import { app, BrowserWindow, screen, Tray, Menu, nativeImage } from 'electron';
import * as path from "node:path";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let tray = null;

const createWindow = (): void => {
  const primaryDisplay = screen.getPrimaryDisplay();
  const { width: screenWidth } = primaryDisplay.workAreaSize;
  const windowWidth = 800;
  const windowHeight = 600;

  const mainWindow = new BrowserWindow({
    height: windowHeight,
    width: windowWidth,

    transparent: true,
    frame: false,
    alwaysOnTop: true,
    skipTaskbar: true,

    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
    },
  });
  mainWindow.setBounds({
    x: screenWidth - windowWidth,
    y: 0,
    width: windowWidth,
    height: windowHeight,
  })

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  mainWindow.setIgnoreMouseEvents(true, { forward: true });

  const iconPath = app.isPackaged
      ? path.join(__dirname, "..", "..", "..", "noobgam.ico")
      : path.join(__dirname, "..", "..", "src", "noobgam.ico");

  const icon = nativeImage.createFromPath(iconPath);
  tray = new Tray(icon);
  tray.setToolTip('This is my application.')
  const contextMenu = Menu.buildFromTemplate([
    { label: 'Quit', type: 'normal', click: () => {
        app.quit()
      }},
  ])
  tray.setContextMenu(contextMenu)
};


app.on('ready', createWindow);

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
